{"componentChunkName":"component---src-components-blog-post-layout-js","path":"/how-to-use-node-js-express-middleware-in-your-web-application","result":{"data":{"wordpressPost":{"slug":"how-to-use-node-js-express-middleware-in-your-web-application","title":"How to Use Node.js Express Middleware in your Web Application?","content":"<p>Middleware plays an important role when building Node web applications using Express framework. Simply put, you cannot build an Express application without incorporating middleware. So, the possibility is, knowingly or unknowingly, you have used middleware in your Express applications before. Then, it’s high time that you get to know what exactly middleware is and how to get the maximum advantage out of it.</p>\n<h2><strong>What is Express Middleware?</strong></h2>\n<p>Middleware is a function that runs in between two other functions. In Express, middleware is run in the time between the server receiving a request and the request approaching its route handler. Middleware function accepts three basic inputs: HTTP request and response objects, and the next middleware function that is going to be called.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">function middlewareExample(req, res, next) {\r\n\tif (req.someParameter === 1) {\r\n\t\tnext()\r\n\t} else {\r\n\t\tres.send(\"Can't continue further\")\r\n\t}\r\n}</code></pre>\n<p>As the example shows, middleware can be used to determine whether the request should be passed on to the next middleware. If not, an appropriate response is sent, ending the lifetime of the request.</p>\n<h2><strong>Where should Express Middleware be Used?</strong></h2>\n<p>In general, middleware can be used to carry out any process that has to be completed before finally passing the request to the route handler. However, there are three main occasions where middleware is commonly used.</p>\n<h3><strong>1. Authentication &amp; Authorization</strong></h3>\n<p>Express middleware can be used to check whether the requesting user has permission to access the route handler. If the user does not have permission, the request is terminated and a message denying access is sent. Otherwise, the request gets permission to proceed to the next step.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">function verifyUser(req, res, next) {\r\n\tlet token = req.headers['x-access-token']\r\n\tif (!token) {\r\n\t\treturn res.status(403).json('Log in to continue')\r\n\t}\r\n\r\n\tjwt.verify(token, config.secret, (error, decoded) =&gt; {\r\n\t\tif (error) {\r\n\t\t\treturn res.status(403).json('Invalid token')\r\n\t\t} else {\r\n\t\t\tnext()\r\n\t\t}\r\n\t})\r\n}\r\n</code></pre>\n<h3><strong>2. Error Handling</strong></h3>\n<p>Error handling middleware can be used in Express to handle any unhandled error that occurred during the execution. This type of middleware accepts an additional argument, error, along with the previous three arguments.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">function handleUnhandledError(err, req, res, next) {\r\n\tif (err) {\r\n\t\tres.status(500).send('An error occured')\r\n\t} else {\r\n\t\tnext()\r\n\t}\r\n}</code></pre>\n<p>Middleware can then handle the error in an appropriate manner.</p>\n<h3>3. Logging</h3>\n<p>Express middleware can be used to logging user requests. Before directing the request to the route handler, the user’s request is logged to keep a record of the user’s access history.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">function logUserRequest(req, res, next) {\r\n\tlogger.info(req.url)\r\n\tnext()\r\n}</code></pre>\n<h2><strong>How to Use Express Middleware?</strong></h2>\n<p>There are several ways to use middleware in an Express application.</p>\n<p>The simplest method is using the middleware before all the route handlers in your application.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">const app = express()\r\nconst middleware = require('/middleware')\r\n\r\napp.use(middleware)\r\n\r\napp.get('/firstRoute', firstRouteHandler)\r\napp.get('/secondRoute', secondRouteHandler)</code></pre>\n<p>In this example, the middleware is used before both ‘firstRoute’ and ‘secondRoute’ route handlers.</p>\n<p>You can also introduce a route handler specific to a particular route as shown in the following example.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">app.get('/firstRoute', middleware)\r\napp.get('/firstRoute', firstRouteHandler)\r\napp.get('/secondRoute', secondRouteHandler)</code></pre>\n<p>In the above method, the middleware is only used on requests coming to the ‘firstRoute’ route handler.</p>\n<p>The final method to use middlewares is using them inside the route handler before the handling function.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">app.get('/firstRoute', middleware, firstRouteHandler)\r\napp.get('/secondRoute', secondRouteHandler)</code></pre>\n<p>Here, the middleware is used inside the ‘firstRoute’ route handler and it applies only to the requests coming to this endpoint.</p>\n<p>You can also ‘chain’ middleware functions. Middleware chaining indicates directing the request from one middleware function to another. Chaining can be implemented in any of the three ways shown in the previous examples.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">app.use(middleware1)\r\napp.use(middleware2)\r\napp.get('/firstRoute', middleware1)\r\napp.get('/firstRoute', middleware2)\r\napp.get('/firstRoute', middleware1, middleware2, firstRouteHandler)</code></pre>\n<p>Here, when the next is called inside the middleware1 function, middleware2 starts its implementation.</p>\n<h2><strong>Built-in and Third-party Middleware</strong></h2>\n<p>In addition to defining your custom middleware, Express applications can use built-in or third-party middleware. Here, you can see examples of such usage.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">const bodyParser = require('body-parser')\r\n\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(express.static(__dirname + '/public'))</code></pre>\n<p>&nbsp;</p>\n","featured_media":{"source_url":"https://practice.codingsrc.com/wp-content/uploads/2020/03/nodejs-express-middleware.png"},"categories":[42,259],"excerpt":"<p>Middleware plays an important role when building Node web applications using Express framework. Simply put, you cannot build an Express application without incorporating middleware. So,&#8230;</p>\n"}},"pageContext":{"slug":"how-to-use-node-js-express-middleware-in-your-web-application"}}}