{"componentChunkName":"component---src-components-blog-post-layout-js","path":"/node-js-express-hbs-tutorial-handlebars","result":{"data":{"wordpressPost":{"slug":"node-js-express-hbs-tutorial-handlebars","title":"Node.js Express hbs Tutorial (Handlebars)","content":"<p>Most of the time when we start working on a web project, then it quickly gets complex as we write more and more code. In the beginning, if we don’t structure our code efficiently then it will most probably affect the scalability of our application in later stages.</p>\n<p>A good starting point is to separate our website logic from the design and view part. This will make the source code a bit more clean and manageable.</p>\n<p>If we talk about Node.js and Express application, then you might have noticed that we use JavaScript variables and logical statements directly inside our HTML files. So, in this tutorial, I’ll help you understand the power and usability of <a href=\"https://handlebarsjs.com/\">Handlebars</a> (a JavaScript Template Engine).  So let&#8217;s start with this Node.js Express Hbs tutorial with the available template engines:</p>\n<h2><strong>Available Template Engines</strong></h2>\n<p>First of all, let’s have a quick look at available JavaScript template engines that might be more suitable in different scenarios.</p>\n<ul>\n<li><a href=\"http://handlebarsjs.com/\" rel=\"nofollow\">Handlebars</a></li>\n<li><a href=\"https://github.com/janl/mustache.js/\" rel=\"nofollow\">Mustache</a></li>\n<li><a href=\"https://github.com/olado/doT\" rel=\"nofollow\">doT</a></li>\n<li><a href=\"https://github.com/squirrellyjs/squirrelly\" rel=\"nofollow\">Squirrelly</a></li>\n<li><a href=\"https://github.com/jashkenas/underscore/\" rel=\"nofollow\">Underscore</a></li>\n<li><a href=\"https://github.com/mozilla/nunjucks\" rel=\"nofollow\">Nunjucks</a></li>\n<li><a href=\"http://jade-lang.com/\" rel=\"nofollow\">Jade Language</a></li>\n<li><a href=\"https://github.com/pugjs/pug\" rel=\"nofollow\">Pug</a></li>\n<li><a href=\"https://github.com/marko-js/marko\" rel=\"nofollow\">Marko</a></li>\n<li><a href=\"https://github.com/BorisMoore/jsrender\" rel=\"nofollow\">JsRender</a></li>\n</ul>\n<p>Now you have seen that there are tons of template engines that are based on JavaScript language. But, the main reason behind using Handlebars in this tutorial is that it provides a more minimalistic approach than others.</p>\n<p>In simple words, through Handlebars, you can achieve more by just writing a few lines of code.</p>\n<h2><strong>What is Handlebars?</strong></h2>\n<p>Handlebars is a free and opensource JavaScript Template Engine that allows us to inject JavaScript property values directly into our HTML code. Basically, it works as a compiler, which means that it takes some input, then compiles and transforms it into a result.</p>\n<p>In our case, we have to input the HTML and JavaScript code inside the Handlebars file. It will then automatically compile the code (fill the values) and return the actual HTML web page.</p>\n<p>At the time of this writing, Handlebars aka hbs has received 15.2K stars on its Github repository. It has a large community of users while 150+ professional developers had contributed their code and time for the enhancement of this library.</p>\n<p>It is designed to be the superset of popular library <a href=\"https://mustache.github.io/\">Mustache</a> that is used for generating logic-less templates. To speed up the overall process, it transforms the hbs templates into JavaScript functions.</p>\n<h3><strong>Setup a Project</strong></h3>\n<p>Before writing any code, I assume that you have already installed <a href=\"https://nodejs.org/en/\">Node.js</a> and <a href=\"https://www.npmjs.com/\">Npm</a> on your computer. If so, we’re good to set up our Node.js, Express and Handlebars project.</p>\n<p>At first, you need to create a folder that will contain our whole project. After that, install Express and Handlebars in it.</p>\n<pre class=\"line-numbers\"><code class=\"language-bash\">npm i express\r\n\r\nnpm i express-handlebars</code></pre>\n<p>Now we need to create some more folders that will help us arrange our Handlebars templates. I’ll name the main folder as<strong> “views”</strong> while also adding 2 sub-folders in it with the name <strong>“layouts”</strong> and <strong>“partials”</strong>.</p>\n<p>Mostly, the templates inside <strong>“layouts”</strong> folder is used to implement a common style on all web pages of a website while on the other hand<strong> “partials”</strong> folder contains small reusable parts like header, menu, footer, etc.</p>\n<p>For the purpose of this tutorial, let’s create a file named<strong> “home.hbs”</strong> in <strong>“views”</strong> and <strong>“main.hbs”</strong> inside the sub-folder <strong>“layouts”</strong>.</p>\n<p>We will use <strong>“main.hbs”</strong> to store the layout of our website that can be easily applied on different web pages. Similarly,<strong> “home.hbs”</strong> refers to the actual file that contains the data of a specific web page.</p>\n<p>In this tutorial, I’ll also apply some style to our web page using CSS. So, let&#8217;s create a<strong> “public”</strong> folder inside your project and then place a file called <strong>“styles.css”</strong> in it.</p>\n<h3><strong>Start Writing Some Code</strong></h3>\n<p>Create a file named <strong>“index.js”</strong> inside your project root and import the recently installed JavaScript modules in it.</p>\n<h3><strong>Load Express module</strong></h3>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">const express = require('express');</code></pre>\n<h3><strong>Load Handlebars module</strong></h3>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">const handlebars = require('express-handlebars');</code></pre>\n<p>To create an Express application you need to initialize it using the below code.</p>\n<h3><strong>Run Express</strong></h3>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">const app = express();</code></pre>\n<p>Now its time to configure the Handlebars template engine for our app.</p>\n<h3><strong>Configure our application to utilize the Handlebars engine</strong></h3>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">app.set('view engine', 'hbs');</code></pre>\n<h3><strong>Settings for Handlebars</strong></h3>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">app.engine('hbs', handlebars({\r\n    layoutsDir: __dirname + '/views/layouts',\r\n    extname: 'hbs',\r\n    defaultLayout: 'main'\r\n}));</code></pre>\n<p>The first line of the above code snippet is really simple and straightforward as here we are just telling Express to use Handlebars for rendering our web pages. Later on, I added some settings to define the layouts directory, file extension and default layout of Handlebars templates.</p>\n<p>Let&#8217;s inform Express to allow the usage of static files inside our application from “public” folder. Please note that this step is very important to use static files like CSS on our website.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">app.use(express.static('public'));</code></pre>\n<p>Now set up a route through which we can access or view our web page.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">app.get('/', (req, res) =&gt; {\r\n    // Integrates the body of \"home.hbs\" inside the defaultLayout \"main.hbs\"\r\n    res.render('home');\r\n});</code></pre>\n<p>At last, we just need to set a port and execute our code.</p>\n<h3><strong>Set a port</strong></h3>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">const port = 3000;</code></pre>\n<h3><strong>Start our application</strong></h3>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">app.listen(port, () =&gt; console.log(`App listening to port ${port}`));</code></pre>\n<h3><strong>Create and Style Web Pages</strong></h3>\n<p>We already created our template and CSS files. In this section, we have to add some code there.</p>\n<p>Open <strong>“main.hbs”</strong> layout file and insert the below code in it.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n\t&lt;meta charset=\"UTF-8\"&gt;\r\n\t&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n\t&lt;title&gt;Document&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\n<p>Open <strong>“home.hbs”</strong> and enter the below code.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">&lt;h1&gt;List of Countries&lt;/h1&gt;\r\n&lt;ul&gt;\r\n\t&lt;li class=\"blue_item\"&gt;Australia&lt;/li&gt;\r\n\t&lt;li class=\"blue_item\"&gt;USA&lt;/li&gt;\r\n\t&lt;li class=\"red_item\"&gt;Pakistan&lt;/li&gt;\r\n\t&lt;li class=\"blue_item\"&gt;UK&lt;/li&gt;\r\n\t&lt;li class=\"red_item\"&gt;Japan&lt;/li&gt;\r\n&lt;/ul&gt;</code></pre>\n<p>Now style the above markup language code using CSS.</p>\n<pre class=\"line-numbers\"><code class=\"language-css\">li {\r\n\tlist-style: none;\r\n\tfont-size: 20px;\r\n\twidth: 300px;\r\n\tmargin: 5px;\r\n\tpadding: 5px;\r\n}\r\n\r\n.blue_item {\r\n\tbackground-color: #0000ff;\r\n\tcolor: #fff;\r\n}\r\n\r\n.red_item {\r\n\tbackground-color: #ff0000;\r\n}</code></pre>\n<h3><strong>Test our application</strong></h3>\n<p>Write below code in project console.</p>\n<pre class=\"line-numbers\"><code class=\"language-bash\">node index.js</code></pre>\n<p>After that open the website in a browser by typing this URL.</p>\n<p><a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<p>Now that you have a complete project learn <a href=\"/heroku-tutorial-for-beginners/\">how you can deploy to Heroku under 5 minutes</a></p>\n<h2><strong>Conclusion</strong></h2>\n<p>Handlebars templating engine can have a significant impact on the growth and scalability of your project. It enables us to write better, cleaner and less code due to its minimalistic structure.</p>\n<p>A lot of enterprise-level companies use it in their tech stack. Among them, the most noticeable are Intel, Slack, DuckDuckGo and Khan Academy. So, It’s great to have Handlebars.js listed among your professional skills.</p>\n","featured_media":{"source_url":"https://practice.codingsrc.com/wp-content/uploads/2020/03/hbs-tutorial.png"},"categories":[42,259,12],"excerpt":"<p>Most of the time when we start working on a web project, then it quickly gets complex as we write more and more code. In&#8230;</p>\n"}},"pageContext":{"slug":"node-js-express-hbs-tutorial-handlebars"}}}